---
import { detectLanguageFromPath, getAlternateLanguagePath, t, type Language } from '../utils/i18n';

interface Props {
  currentPath?: string;
}

const { currentPath = Astro.url.pathname } = Astro.props;
const currentLang = detectLanguageFromPath(currentPath);
const alternateLang: Language = currentLang === 'zh' ? 'en' : 'zh';
const alternatePath = getAlternateLanguagePath(currentPath, alternateLang);
---

<div class="language-toggle">
  <div class="relative inline-block text-left">
    <button
      id="language-toggle-btn"
      type="button"
      class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
      </svg>
      {currentLang === 'zh' ? 'ä¸­æ–‡' : 'English'}
      <svg class="ml-2 -mr-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>

    <div
      id="language-dropdown"
      class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
      role="menu"
      aria-orientation="vertical"
      aria-labelledby="language-toggle-btn"
    >
      <div class="py-1" role="none">
        <a
          href={currentLang === 'zh' ? currentPath : alternatePath}
          class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white"
          role="menuitem"
          class:list={[currentLang === 'zh' && 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white']}
        >
          <span class="mr-3">ðŸ‡¨ðŸ‡³</span>
          ä¸­æ–‡
          {currentLang === 'zh' && <span class="ml-auto text-blue-600 dark:text-blue-400">âœ“</span>}
        </a>
        <a
          href={currentLang === 'en' ? currentPath : alternatePath}
          class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white"
          role="menuitem"
          class:list={[currentLang === 'en' && 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white']}
        >
          <span class="mr-3">ðŸ‡ºðŸ‡¸</span>
          English
          {currentLang === 'en' && <span class="ml-auto text-blue-600 dark:text-blue-400">âœ“</span>}
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  // Language toggle dropdown functionality
  const toggleBtn = document.getElementById('language-toggle-btn');
  const dropdown = document.getElementById('language-dropdown');

  if (toggleBtn && dropdown) {
    toggleBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      const isHidden = dropdown.classList.contains('hidden');
      
      if (isHidden) {
        dropdown.classList.remove('hidden');
        toggleBtn.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!toggleBtn.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });
  }
</script>

<style>
  .language-toggle {
    @apply relative;
  }
</style>
