---
import { detectLanguageFromPath, getAlternateLanguagePath, t, type Language } from '../utils/i18n';

interface Props {
  currentPath?: string;
  showAvailability?: boolean;
}

const { currentPath = Astro.url.pathname, showAvailability = false } = Astro.props;
const currentLang = detectLanguageFromPath(currentPath);
const alternateLang: Language = currentLang === 'zh' ? 'en' : 'zh';
const alternatePath = getAlternateLanguagePath(currentPath, alternateLang);

// Check if we're on a content page to show availability
const cleanPath = currentPath.replace(/^\/cn/, ''); // Remove /cn prefix if present
const isContentPage = cleanPath.includes('/blog/') || cleanPath.includes('/talks/');
---

<div class="language-toggle">
  <div class="relative inline-block text-left">
    <button
      id="language-toggle-btn"
      type="button"
      class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
      </svg>
      {currentLang === 'zh' ? '中文' : 'English'}
      <svg class="ml-2 -mr-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>

    <div
      id="language-dropdown"
      class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
      role="menu"
      aria-orientation="vertical"
      aria-labelledby="language-toggle-btn"
    >
      <div class="py-1" role="none">
        <a
          href={currentLang === 'zh' ? currentPath : alternatePath}
          class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white"
          role="menuitem"
          class:list={[currentLang === 'zh' && 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white']}
        >
          <span class="mr-3">🇨🇳</span>
          <div class="flex flex-col">
            <span>中文</span>
            {isContentPage && showAvailability && (
              <span class="text-xs text-gray-500 dark:text-gray-400" id="zh-availability">
                检查中...
              </span>
            )}
          </div>
          {currentLang === 'zh' && <span class="ml-auto text-blue-600 dark:text-blue-400">✓</span>}
        </a>
        <a
          href={currentLang === 'en' ? currentPath : alternatePath}
          class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white"
          role="menuitem"
          class:list={[currentLang === 'en' && 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white']}
        >
          <span class="mr-3">🇺🇸</span>
          <div class="flex flex-col">
            <span>English</span>
            {isContentPage && showAvailability && (
              <span class="text-xs text-gray-500 dark:text-gray-400" id="en-availability">
                Checking...
              </span>
            )}
          </div>
          {currentLang === 'en' && <span class="ml-auto text-blue-600 dark:text-blue-400">✓</span>}
        </a>

        {isContentPage && (
          <div class="border-t border-gray-200 dark:border-gray-600 mt-1 pt-1">
            <div class="px-4 py-2 text-xs text-gray-500 dark:text-gray-400">
              <div class="flex items-center justify-between">
                <span>{t('language', currentLang)}</span>
                <button
                  id="refresh-availability"
                  class="text-blue-600 dark:text-blue-400 hover:underline"
                  title="Refresh availability"
                >
                  ↻
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<script>
  // Language toggle dropdown functionality
  const toggleBtn = document.getElementById('language-toggle-btn');
  const dropdown = document.getElementById('language-dropdown');
  const refreshBtn = document.getElementById('refresh-availability');
  const zhAvailability = document.getElementById('zh-availability');
  const enAvailability = document.getElementById('en-availability');

  // Check content availability for current page
  async function checkContentAvailability() {
    if (!zhAvailability || !enAvailability) return;

    const currentPath = window.location.pathname;
    const cleanPath = currentPath.replace(/^\/cn/, ''); // Remove /cn prefix if present
    const isContentPage = cleanPath.includes('/blog/') || cleanPath.includes('/talks/');

    if (!isContentPage) return;

    try {
      // Extract content type and slug from path
      let contentType = '';
      let slug = '';

      // Handle both English (root) and Chinese (/cn/) paths
      const cleanPath = currentPath.replace(/^\/cn/, ''); // Remove /cn prefix if present

      if (cleanPath.includes('/blog/')) {
        contentType = 'blog';
        slug = cleanPath.split('/blog/')[1].replace(/\/$/, '');
      } else if (cleanPath.includes('/talks/')) {
        contentType = 'talks';
        slug = cleanPath.split('/talks/')[1].replace(/\/$/, '');
      }

      if (!slug) return;

      // Check if content exists in both languages by trying to fetch them
      const [zhExists, enExists] = await Promise.all([
        checkContentExists(contentType, slug, 'zh'),
        checkContentExists(contentType, slug, 'en')
      ]);

      // Update availability indicators
      zhAvailability.textContent = zhExists ? '✓ 可用' : '✗ 暂无';
      zhAvailability.className = zhExists
        ? 'text-xs text-green-600 dark:text-green-400'
        : 'text-xs text-gray-500 dark:text-gray-400';

      enAvailability.textContent = enExists ? '✓ Available' : '✗ Not available';
      enAvailability.className = enExists
        ? 'text-xs text-green-600 dark:text-green-400'
        : 'text-xs text-gray-500 dark:text-gray-400';

    } catch (error) {
      console.warn('Error checking content availability:', error);
      zhAvailability.textContent = '检查失败';
      enAvailability.textContent = 'Check failed';
    }
  }

  // Check if content exists by attempting to fetch it
  async function checkContentExists(type, slug, lang) {
    try {
      const path = lang === 'zh' ? `/cn/${type}/${slug}` : `/${type}/${slug}`;
      const response = await fetch(path, { method: 'HEAD' });
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  if (toggleBtn && dropdown) {
    toggleBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      const isHidden = dropdown.classList.contains('hidden');

      if (isHidden) {
        dropdown.classList.remove('hidden');
        toggleBtn.setAttribute('aria-expanded', 'true');

        // Check availability when dropdown opens
        checkContentAvailability();
      } else {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!toggleBtn.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        dropdown.classList.add('hidden');
        toggleBtn.setAttribute('aria-expanded', 'false');
      }
    });
  }

  // Refresh availability button
  if (refreshBtn) {
    refreshBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      checkContentAvailability();
    });
  }

  // Initial availability check on page load
  document.addEventListener('DOMContentLoaded', () => {
    if (zhAvailability && enAvailability) {
      checkContentAvailability();
    }
  });
</script>

<style>
  .language-toggle {
    @apply relative;
  }
</style>
