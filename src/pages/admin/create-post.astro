---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Create Blog Post - Admin">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Create Blog Post</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">Write and publish a new blog article</p>
          </div>
          <a 
            href="/admin" 
            class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            ‚Üê Back to Dashboard
          </a>
        </div>

        <!-- Form -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
          <div class="mb-6 rounded-md border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/30">
            <h2 class="text-base font-semibold text-blue-900 dark:text-blue-200">Automated Metadata</h2>
            <p class="mt-2 text-sm text-blue-800 dark:text-blue-100">
              Only the title and content fields are required. The backend service will automatically generate an SEO-friendly description, choose the most appropriate tags, and detect the source language using the secured LLM integration. No additional confirmation is needed.
            </p>
          </div>

          <form id="create-post-form" class="space-y-6">
            <!-- Title -->
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Title *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Enter post title"
              />
            </div>

            <!-- Content -->
            <div>
              <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Content *
              </label>
              <textarea
                id="content"
                name="content"
                required
                rows="20"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white font-mono text-sm"
                placeholder="Write your blog post content in Markdown format..."
              ></textarea>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">You can use Markdown syntax for formatting</p>
            </div>

            <!-- Error/Success Messages -->
            <div id="message" class="hidden p-4 rounded-md"></div>

            <!-- Submit Button -->
            <div class="flex justify-end space-x-4">
              <button
                type="button"
                id="preview-btn"
                class="px-6 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Preview
              </button>
              <button
                type="submit"
                id="submit-btn"
                class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span id="submit-text">Create Post</span>
                <span id="submit-spinner" class="hidden">
                  <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Processing...
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Check GitHub authentication
    function checkAuth() {
      const githubToken = localStorage.getItem('github-token');
      const githubUser = localStorage.getItem('github-user');

      if (!githubToken || !githubUser) {
        window.location.href = '/admin';
        return false;
      }
      return true;
    }

    // Check authentication on page load
    if (!checkAuth()) {
      // Will redirect to admin page
    }

    const form = document.getElementById('create-post-form') as HTMLFormElement;
    const messageDiv = document.getElementById('message') as HTMLElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitSpinner = document.getElementById('submit-spinner') as HTMLElement;
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const contentInput = document.getElementById('content') as HTMLTextAreaElement;

    function showMessage(message: string, type: 'success' | 'error' | 'info') {
      const classes = {
        success: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
        error: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
        info: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      }[type];

      messageDiv.innerHTML = message.replace(/\n/g, '<br />');
      messageDiv.className = `p-4 rounded-md space-y-1 ${classes}`;
      messageDiv.classList.remove('hidden');
      messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    function hideMessage() {
      messageDiv.classList.add('hidden');
      messageDiv.innerHTML = '';
    }

    function setLoading(loading: boolean) {
      submitBtn.disabled = loading;
      if (loading) {
        submitText.classList.add('hidden');
        submitSpinner.classList.remove('hidden');
      } else {
        submitText.classList.remove('hidden');
        submitSpinner.classList.add('hidden');
      }
    }

    function generateSlug(title: string): string {
      return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    function detectLanguageHint(content: string): 'en' | 'zh' {
      const hasChineseCharacters = /[\u4e00-\u9fff]/.test(content);
      return hasChineseCharacters ? 'zh' : 'en';
    }

    function encodeContent(content: string): string {
      return btoa(unescape(encodeURIComponent(content)));
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const titleValue = titleInput.value.trim();
      const contentValue = contentInput.value;

      if (!titleValue) {
        showMessage('Title is required before creating a post.', 'error');
        return;
      }

      if (!contentValue.trim()) {
        showMessage('Content is required before creating a post.', 'error');
        return;
      }

      hideMessage();
      setLoading(true);

      const githubToken = localStorage.getItem('github-token');
      if (!githubToken) {
        showMessage('Not authenticated. Please login again.', 'error');
        setLoading(false);
        return;
      }

      const slug = generateSlug(titleValue);
      const languageHint = detectLanguageHint(contentValue);
      const encodedContent = encodeContent(contentValue);

      if (encodedContent.length > 60000) {
        showMessage('The content is too large for automated processing. Please split the post into smaller sections or contact the administrator.', 'error');
        setLoading(false);
        return;
      }

      try {
        const response = await fetch('https://api.github.com/repos/redreamality/redreamality.github.io/dispatches', {
          method: 'POST',
          headers: {
            'Authorization': `token ${githubToken}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            event_type: 'create-post-with-llm',
            client_payload: {
              title: titleValue,
              content_base64: encodedContent,
              slug,
              language_hint: languageHint
            }
          })
        });

        if (response.ok) {
          showMessage(
            `‚úÖ Workflow triggered to create the post with AI metadata.\n\nüìù Slug: ${slug}\nüåê Language hint: ${languageHint === 'zh' ? 'Chinese (detected)' : 'English (detected)'}\nüöÄ Track progress in <a class="underline" target="_blank" rel="noopener noreferrer" href="https://github.com/redreamality/redreamality.github.io/actions/workflows/create-post-with-llm.yml">GitHub Actions</a>.`,
            'success'
          );

          form.reset();
        } else {
          let errorMessage = 'Failed to trigger the backend workflow.';
          try {
            const errorData = await response.json();
            if (errorData?.message) {
              errorMessage = `${errorMessage} ${errorData.message}`;
            }
          } catch (error) {
            const text = await response.text();
            if (text) {
              errorMessage = `${errorMessage} ${text}`;
            }
          }
          showMessage(errorMessage, 'error');
        }
      } catch (error) {
        console.error('Workflow dispatch error:', error);
        showMessage('Network error. Please try again.', 'error');
      } finally {
        setLoading(false);
      }
    });

    // Preview functionality (basic)
    document.getElementById('preview-btn')?.addEventListener('click', () => {
      const content = contentInput.value;
      if (!content) {
        showMessage('Please enter some content to preview', 'error');
        return;
      }
      hideMessage();

      const previewWindow = window.open('', '_blank');
      if (previewWindow) {
        previewWindow.document.write(`
          <html>
            <head>
              <title>Preview</title>
              <style>
                body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
                code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
              </style>
            </head>
            <body>
              <h1>Content Preview</h1>
              <pre>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
            </body>
          </html>
        `);
      }
    });
  </script>
</Layout>
