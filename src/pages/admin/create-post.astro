---
import Layout from '../../layouts/Layout.astro';
import { getTags } from '../../utils/i18n';

const existingTagsEn = await getTags('en');
const existingTagsZh = await getTags('zh');
const existingTags = Array.from(new Set([...existingTagsEn, ...existingTagsZh])).sort();
const serializedTags = JSON.stringify(existingTags)
  .replace(/\\/g, '\\\\')
  .replace(/'/g, "\\'")
  .replace(/</g, '\\u003C')
  .replace(/\u2028/g, '\\u2028')
  .replace(/\u2029/g, '\\u2029');
---

<Layout title="Create Blog Post - Admin">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Create Blog Post</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">Write and publish a new blog article</p>
          </div>
          <a 
            href="/admin" 
            class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            ← Back to Dashboard
          </a>
        </div>

        <!-- Form -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
          <form id="create-post-form" class="space-y-6">
            <!-- Title -->
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Title *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Enter post title"
              />
            </div>

            <!-- Metadata Autofill -->
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-3">
              <div>
                <h2 class="text-base font-medium text-gray-900 dark:text-white">Metadata Assistance</h2>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  Title and content are required. Use AI to suggest description, tags, and language.
                </p>
              </div>
              <button
                type="button"
                id="auto-fill-btn"
                class="inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-70 disabled:cursor-not-allowed transition-colors"
              >
                ✨ Auto-fill with AI
              </button>
            </div>
            <p id="metadata-status" class="hidden mt-1 text-sm text-gray-600 dark:text-gray-300" aria-live="polite"></p>

            <!-- Description -->
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Description (AI generated)
              </label>
              <textarea
                id="description"
                name="description"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="AI-generated SEO description will appear here"
              ></textarea>
            </div>

            <!-- Tags -->
            <div>
              <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Tags
              </label>
              <input
                type="text"
                id="tags"
                name="tags"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Suggested tags will appear here (comma separated)"
              />
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Review the AI suggestions or enter custom tags, separated by commas</p>
            </div>

            <!-- Language -->
            <div>
              <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Source Language (auto-detected)
              </label>
              <select
                id="language"
                name="language"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="">Select language or wait for AI detection</option>
                <option value="zh">Chinese (中文)</option>
                <option value="en">English</option>
              </select>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">AI will suggest the source language; adjust manually if needed</p>
            </div>

            <!-- Content -->
            <div>
              <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Content *
              </label>
              <textarea
                id="content"
                name="content"
                required
                rows="20"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white font-mono text-sm"
                placeholder="Write your blog post content in Markdown format..."
              ></textarea>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">You can use Markdown syntax for formatting</p>
            </div>

            <!-- Error/Success Messages -->
            <div id="message" class="hidden p-4 rounded-md"></div>

            <!-- Submit Button -->
            <div class="flex justify-end space-x-4">
              <button
                type="button"
                id="preview-btn"
                class="px-6 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Preview
              </button>
              <button
                type="submit"
                id="submit-btn"
                class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span id="submit-text">Create Post</span>
                <span id="submit-spinner" class="hidden">
                  <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Creating...
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Check GitHub authentication
    function checkAuth() {
      const githubToken = localStorage.getItem('github-token');
      const githubUser = localStorage.getItem('github-user');

      if (!githubToken || !githubUser) {
        window.location.href = '/admin';
        return false;
      }
      return true;
    }

    // Check authentication on page load
    if (!checkAuth()) {
      // Will redirect to admin page
    }

    const form = document.getElementById('create-post-form') as HTMLFormElement;
    const messageDiv = document.getElementById('message') as HTMLElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitSpinner = document.getElementById('submit-spinner') as HTMLElement;
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
    const tagsInput = document.getElementById('tags') as HTMLInputElement;
    const languageSelect = document.getElementById('language') as HTMLSelectElement;
    const contentInput = document.getElementById('content') as HTMLTextAreaElement;
    const metadataStatus = document.getElementById('metadata-status') as HTMLElement | null;
    const autoFillBtn = document.getElementById('auto-fill-btn') as HTMLButtonElement | null;

    type MetadataSuggestion = {
      description?: string;
      tags?: string[];
      language?: 'en' | 'zh';
    };

    const EXISTING_TAGS: string[] = JSON.parse('${serializedTags}');
    const EXISTING_TAG_LOOKUP = new Map(EXISTING_TAGS.map(tag => [tag.toLowerCase(), tag]));

    const DEFAULT_LLM_CONFIG = {
      apiBase: 'https://gateway.chat.sensedeal.vip/v1',
      apiKey: 'b9df99ea41435fa7be5ce346b486c33e',
      model: 'qwen2.5-32b-instruct-int4'
    } as const;

    function resolveLLMConfig() {
      try {
        return {
          apiBase: localStorage.getItem('llm-api-base') || DEFAULT_LLM_CONFIG.apiBase,
          apiKey: localStorage.getItem('llm-api-key') || DEFAULT_LLM_CONFIG.apiKey,
          model: localStorage.getItem('llm-model') || DEFAULT_LLM_CONFIG.model
        };
      } catch (error) {
        return { ...DEFAULT_LLM_CONFIG };
      }
    }

    let metadataGenerationInProgress = false;
    let lastMetadataSignature: string | null = null;
    let lastMetadataResult: MetadataSuggestion | null = null;

    function showMessage(message: string, type: 'success' | 'error') {
      messageDiv.textContent = message;
      messageDiv.className = `p-4 rounded-md ${type === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`;
      messageDiv.classList.remove('hidden');
      messageDiv.scrollIntoView({ behavior: 'smooth' });
    }

    function setLoading(loading: boolean) {
      submitBtn.disabled = loading;
      if (loading) {
        submitText.classList.add('hidden');
        submitSpinner.classList.remove('hidden');
      } else {
        submitText.classList.remove('hidden');
        submitSpinner.classList.add('hidden');
      }
    }

    function setMetadataStatus(message: string, type: 'info' | 'success' | 'error' = 'info') {
      if (!metadataStatus) return;
      const colorClasses =
        type === 'success'
          ? 'text-green-600 dark:text-green-400'
          : type === 'error'
            ? 'text-red-600 dark:text-red-400'
            : 'text-gray-600 dark:text-gray-300';
      metadataStatus.className = 'mt-1 text-sm ' + colorClasses;
      metadataStatus.textContent = message;
    }

    function clearMetadataStatus() {
      if (!metadataStatus) return;
      metadataStatus.textContent = '';
      metadataStatus.className = 'hidden mt-1 text-sm text-gray-600 dark:text-gray-300';
    }

    function detectLanguageFromContent(content: string): 'en' | 'zh' {
      const hasChineseCharacters = /[\u4e00-\u9fff]/.test(content);
      return hasChineseCharacters ? 'zh' : 'en';
    }

    function createMetadataSignature(title: string, content: string): string {
      return title + '::' + content.slice(0, 2000);
    }

    async function requestMetadataFromLLM(title: string, content: string): Promise<MetadataSuggestion> {
      const config = resolveLLMConfig();

      if (!config.apiKey) {
        throw new Error('LLM API key is missing. Please configure it or fill the metadata manually.');
      }

      const MAX_CONTENT_LENGTH = 8000;
      const truncatedContent = content.length > MAX_CONTENT_LENGTH ? content.slice(0, MAX_CONTENT_LENGTH) : content;

      const tagsGuidance = EXISTING_TAGS.length > 0
        ? EXISTING_TAGS.join(', ')
        : 'no predefined tags';

      const systemPrompt = [
        'You are an editorial and SEO assistant for a technical blog.',
        'Generate supporting metadata for the provided article using the following rules:',
        '1. Craft an SEO-friendly description (ideally 120-160 characters) containing high-intent keywords readers would use when searching for this topic. Keep the output in the original language.',
        '2. Suggest 2-5 tags that best describe the article. Prefer tags from this existing list to avoid duplicates: ' + tagsGuidance + '.',
        '   If none of the existing tags apply, add at most one concise new tag that does not duplicate the meaning of an existing tag.',
        '3. Detect the source language: respond with "en" for English or "zh" for Simplified Chinese.',
        'Return ONLY a valid JSON object matching this TypeScript type: {"description": string, "tags": string[], "language": "en" | "zh"}.',
        'Do not include markdown code fences, explanations, or additional keys.'
      ].join('\n');

      const userPrompt = 'Title: ' + title + '\n\nContent:\n' + truncatedContent;

      const response = await fetch(config.apiBase + '/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + config.apiKey
        },
        body: JSON.stringify({
          model: config.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.2,
          max_tokens: 800
        })
      });

      if (!response.ok) {
        throw new Error('LLM API error: ' + response.status + ' ' + response.statusText);
      }

      const data = await response.json();
      const rawContent = data.choices?.[0]?.message?.content as string | undefined;

      if (!rawContent) {
        throw new Error('LLM response did not include metadata.');
      }

      const cleaned = rawContent.replace(/```json|```/gi, '').trim();

      let parsed: MetadataSuggestion;
      try {
        parsed = JSON.parse(cleaned);
      } catch (error) {
        console.error('Failed to parse metadata JSON:', rawContent);
        throw new Error('Metadata parsing error. Please adjust manually.');
      }

      const description = typeof parsed.description === 'string'
        ? parsed.description.trim().replace(/\s+/g, ' ')
        : '';

      if (!description) {
        throw new Error('Metadata description is missing. Please provide it manually.');
      }

      const inputTags = Array.isArray(parsed.tags) ? parsed.tags : [];
      const normalisedTags = inputTags
        .map(tag => String(tag).trim())
        .filter(tag => tag.length > 0);

      const finalTags: string[] = [];
      for (const tag of normalisedTags) {
        const mapped = EXISTING_TAG_LOOKUP.get(tag.toLowerCase()) || tag;
        if (!finalTags.some(existing => existing.toLowerCase() === mapped.toLowerCase())) {
          finalTags.push(mapped);
        }
        if (finalTags.length >= 5) {
          break;
        }
      }

      let language: 'en' | 'zh' | undefined;
      if (parsed.language === 'zh' || parsed.language === 'en') {
        language = parsed.language;
      } else {
        language = detectLanguageFromContent(content);
      }

      return {
        description,
        tags: finalTags,
        language
      };
    }

    function applyMetadataToForm(metadata: MetadataSuggestion | null) {
      if (!metadata) return;

      if (metadata.description) {
        descriptionInput.value = metadata.description;
      }

      if (metadata.tags && metadata.tags.length > 0) {
        tagsInput.value = metadata.tags.join(', ');
      }

      if (metadata.language) {
        languageSelect.value = metadata.language;
      }
    }

    async function generateMetadata(force = false): Promise<MetadataSuggestion | null> {
      if (metadataGenerationInProgress) {
        return null;
      }

      const title = titleInput.value.trim();
      const content = contentInput.value.trim();

      if (!title || !content) {
        setMetadataStatus('Please provide both a title and content before auto-filling.', 'error');
        return null;
      }

      const signature = createMetadataSignature(title, content);

      if (!force && lastMetadataSignature === signature && lastMetadataResult) {
        applyMetadataToForm(lastMetadataResult);
        setMetadataStatus('Metadata already generated for the current content.', 'info');
        return lastMetadataResult;
      }

      metadataGenerationInProgress = true;
      const originalLabel = autoFillBtn?.textContent || '';

      if (autoFillBtn) {
        autoFillBtn.disabled = true;
        autoFillBtn.textContent = 'Generating...';
      }

      setMetadataStatus('Generating metadata with AI...', 'info');

      try {
        const metadata = await requestMetadataFromLLM(title, content);
        applyMetadataToForm(metadata);
        lastMetadataSignature = signature;
        lastMetadataResult = metadata;
        setMetadataStatus('Metadata generated. Review the details before submitting.', 'success');
        return metadata;
      } catch (error) {
        console.error('Metadata generation error:', error);
        setMetadataStatus('Failed to generate metadata. Please try again or fill the fields manually.', 'error');
        return null;
      } finally {
        metadataGenerationInProgress = false;
        if (autoFillBtn) {
          autoFillBtn.disabled = false;
          autoFillBtn.textContent = originalLabel || '✨ Auto-fill with AI';
        }
      }
    }

    autoFillBtn?.addEventListener('click', async () => {
      await generateMetadata(true);
    });

    clearMetadataStatus();

    function generateSlug(title: string): string {
      return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    function parseTags(tagsString: string): string[] {
      if (!tagsString) return [];
      return tagsString
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);
    }

    function generateBlogFrontmatter(data: any): string {
      const tags = parseTags(data.tags);
      const now = new Date().toISOString();

      return `---
title: '${data.title.replace(/'/g, "''")}'
pubDate: ${now}
description: '${data.description.replace(/'/g, "''")}'
author: 'Remy'
tags: [${tags.map(tag => `'${tag.replace(/'/g, "''")}'`).join(', ')}]
---

`;
    }

    function downloadFile(content: string, filename: string) {
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const titleValue = titleInput.value.trim();
      const contentValue = contentInput.value;

      if (!titleValue) {
        showMessage('Title is required before creating a post.', 'error');
        return;
      }

      if (!contentValue.trim()) {
        showMessage('Content is required before creating a post.', 'error');
        return;
      }

      messageDiv.classList.add('hidden');

      if (!descriptionInput.value.trim() || !languageSelect.value) {
        const metadata = await generateMetadata(true);
        if (!metadata) {
          showMessage('Unable to generate metadata automatically. Please fill in the missing fields.', 'error');
          return;
        }
      }

      if (!languageSelect.value) {
        languageSelect.value = detectLanguageFromContent(contentValue);
      }

      const descriptionValue = descriptionInput.value.trim();
      if (!descriptionValue) {
        showMessage('Description is required. Please provide it manually.', 'error');
        return;
      }

      const languageValue = languageSelect.value;
      if (!languageValue) {
        showMessage('Source language is required. Please select it manually.', 'error');
        return;
      }

      const tagsValue = tagsInput.value;

      setLoading(true);

      try {
        const githubToken = localStorage.getItem('github-token');
        if (!githubToken) {
          showMessage('Not authenticated. Please login again.', 'error');
          return;
        }

        const data = {
          title: titleValue,
          description: descriptionValue,
          tags: tagsValue,
          language: languageValue,
          content: contentValue
        };

        const slug = generateSlug(data.title);
        const frontmatter = generateBlogFrontmatter(data);
        const fullContent = frontmatter + data.content;
        const contentPath = data.language === 'en' ? 'src/content/blog-en' : 'src/content/blog-cn';
        const filePath = contentPath + '/' + slug + '.md';

        const response = await fetch(`https://api.github.com/repos/redreamality/redreamality.github.io/contents/${filePath}`, {
          method: 'PUT',
          headers: {
            'Authorization': `token ${githubToken}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: `Add new blog post: ${data.title}`,
            content: btoa(unescape(encodeURIComponent(fullContent)))
          })
        });

        if (response.ok) {
          showMessage(`Blog post "${slug}" created successfully and deployed to GitHub!`, 'success');

          const successMessage = `
✅ Blog post created successfully!

📝 Slug: ${slug}
📁 File: ${filePath}
🚀 Deployment will be triggered automatically

The post will be available shortly at /blog/${slug}

${data.language === 'zh' ? 'Consider creating an English version as well!' : 'Consider creating a Chinese version as well!'}
          `;

          setTimeout(() => {
            alert(successMessage);
            form.reset();
            clearMetadataStatus();
            lastMetadataSignature = null;
            lastMetadataResult = null;
          }, 1000);
        } else {
          const error = await response.json();
          showMessage(error.message || 'Failed to create blog post', 'error');
        }

      } catch (error) {
        console.error('Create post error:', error);
        showMessage('Network error. Please try again.', 'error');
      } finally {
        setLoading(false);
      }
    });

    // Preview functionality (basic)
    document.getElementById('preview-btn')?.addEventListener('click', () => {
      const content = (document.getElementById('content') as HTMLTextAreaElement).value;
      if (!content) {
        showMessage('Please enter some content to preview', 'error');
        return;
      }
      
      // Open preview in new window/tab
      const previewWindow = window.open('', '_blank');
      if (previewWindow) {
        previewWindow.document.write(`
          <html>
            <head>
              <title>Preview</title>
              <style>
                body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
                code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
              </style>
            </head>
            <body>
              <h1>Content Preview</h1>
              <pre>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
            </body>
          </html>
        `);
      }
    });
  </script>
</Layout>
