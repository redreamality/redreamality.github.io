---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Create Blog Post - Admin">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Create Blog Post</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">Write and publish a new blog article</p>
          </div>
          <a 
            href="/admin" 
            class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            ← Back to Dashboard
          </a>
        </div>

        <!-- Form -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
          <form id="create-post-form" class="space-y-6">
            <!-- Title -->
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Title *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Enter post title"
              />
            </div>

            <!-- Description -->
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Description *
              </label>
              <textarea
                id="description"
                name="description"
                required
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Brief description of the post"
              ></textarea>
            </div>

            <!-- Tags -->
            <div>
              <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Tags
              </label>
              <input
                type="text"
                id="tags"
                name="tags"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="Enter tags separated by commas (e.g., javascript, web-development, tutorial)"
              />
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Separate multiple tags with commas</p>
            </div>

            <!-- Language -->
            <div>
              <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Source Language *
              </label>
              <select
                id="language"
                name="language"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="">Select language</option>
                <option value="zh">Chinese (中文)</option>
                <option value="en">English</option>
              </select>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">The system will automatically translate to the other language</p>
            </div>

            <!-- Content -->
            <div>
              <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Content *
              </label>
              <textarea
                id="content"
                name="content"
                required
                rows="20"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white font-mono text-sm"
                placeholder="Write your blog post content in Markdown format..."
              ></textarea>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">You can use Markdown syntax for formatting</p>
            </div>

            <!-- Error/Success Messages -->
            <div id="message" class="hidden p-4 rounded-md"></div>

            <!-- Submit Button -->
            <div class="flex justify-end space-x-4">
              <button
                type="button"
                id="preview-btn"
                class="px-6 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Preview
              </button>
              <button
                type="submit"
                id="submit-btn"
                class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span id="submit-text">Create Post</span>
                <span id="submit-spinner" class="hidden">
                  <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Creating...
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    import type { Language } from '../../utils/i18n';
    import { parseMarkdownContent } from '../../utils/translation';
    import { autoTranslateContentAndCreateFile, LANGUAGE_LABELS } from './auto-translate';

    // Check GitHub authentication
    function checkAuth() {
      const githubToken = localStorage.getItem('github-token');
      const githubUser = localStorage.getItem('github-user');

      if (!githubToken || !githubUser) {
        window.location.href = '/admin';
        return false;
      }
      return true;
    }

    // Check authentication on page load
    if (!checkAuth()) {
      // Will redirect to admin page
    }

    const form = document.getElementById('create-post-form') as HTMLFormElement;
    const messageDiv = document.getElementById('message') as HTMLElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitSpinner = document.getElementById('submit-spinner') as HTMLElement;

    function showMessage(message: string, type: 'success' | 'error') {
      messageDiv.textContent = message;
      messageDiv.className = `p-4 rounded-md ${type === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`;
      messageDiv.classList.remove('hidden');
      messageDiv.scrollIntoView({ behavior: 'smooth' });
    }

    function setLoading(loading: boolean) {
      submitBtn.disabled = loading;
      if (loading) {
        submitText.classList.add('hidden');
        submitSpinner.classList.remove('hidden');
      } else {
        submitText.classList.remove('hidden');
        submitSpinner.classList.add('hidden');
      }
    }

    function generateSlug(title: string): string {
      return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    function parseTags(tagsString: string): string[] {
      if (!tagsString) return [];
      return tagsString
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);
    }

    function generateBlogFrontmatter(data: any): string {
      const tags = parseTags(data.tags);
      const now = new Date().toISOString();

      const frontmatterLines = [
        '---',
        `title: '${data.title.replace(/'/g, "''")}'`,
        `pubDate: ${now}`,
        `description: '${data.description.replace(/'/g, "''")}'`,
        "author: 'Remy'",
        `tags: [${tags.map(tag => `'${tag.replace(/'/g, "''")}'`).join(', ')}]`,
        '---',
        '',
        '',
      ];

      return frontmatterLines.join('\n');
    }

    function toBase64(content: string): string {
      return btoa(unescape(encodeURIComponent(content)));
    }

    function getBlogUrl(language: Language, slug: string): string {
      return language === 'en' ? `/blog/${slug}` : `/cn/blog/${slug}`;
    }

    function downloadFile(content: string, filename: string) {
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const data = {
        title: formData.get('title') as string,
        description: formData.get('description') as string,
        tags: formData.get('tags') as string,
        language: formData.get('language') as string,
        content: formData.get('content') as string
      };

      // Basic validation
      if (!data.title || !data.description || !data.content || !data.language) {
        showMessage('Please fill in all required fields', 'error');
        return;
      }

      setLoading(true);
      messageDiv.classList.add('hidden');

      try {
        const githubToken = localStorage.getItem('github-token');
        if (!githubToken) {
          showMessage('Not authenticated. Please login again.', 'error');
          return;
        }

        // Generate the markdown file content
        const slug = generateSlug(data.title);
        const frontmatter = generateBlogFrontmatter(data);
        const fullContent = frontmatter + data.content;
        const { frontmatter: originalFrontmatter } = parseMarkdownContent(fullContent);

        // Determine file path based on language
        const contentPath = data.language === 'en' ? 'src/content/blog-en' : 'src/content/blog-cn';
        const filePath = `${contentPath}/${slug}.md`;

        // Create blog post via GitHub API
        const response = await fetch(`https://api.github.com/repos/redreamality/redreamality.github.io/contents/${filePath}`, {
          method: 'PUT',
          headers: {
            'Authorization': `token ${githubToken}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: `Add new blog post: ${data.title}`,
            content: toBase64(fullContent)
          })
        });

        if (response.ok) {
          const sourceLanguage = data.language as Language;
          const targetLanguage: Language = sourceLanguage === 'en' ? 'zh' : 'en';
          const targetLanguageLabel = LANGUAGE_LABELS[targetLanguage];
          const sourceUrl = getBlogUrl(sourceLanguage, slug);
          const targetUrl = getBlogUrl(targetLanguage, slug);

          showMessage(`Blog post "${slug}" created. Starting automatic translation to ${targetLanguageLabel}...`, 'success');

          let translationOutcome = await autoTranslateContentAndCreateFile({
            slug,
            contentType: 'blog',
            sourceLanguage,
            targetLanguage,
            originalContent: data.content,
            originalFrontmatter,
            metadata: {
              title: data.title,
              description: data.description,
              tags: parseTags(data.tags),
            },
            githubToken,
          }).catch((translationError) => ({
            success: false,
            error: translationError instanceof Error ? translationError.message : 'Unknown translation error',
          }));

          const translationMessage = translationOutcome.success
            ? `Blog post created and translated to ${targetLanguageLabel}!`
            : `Blog post created, but translation to ${targetLanguageLabel} failed: ${translationOutcome.error || 'Unknown error. Please try again later.'}`;

          showMessage(translationMessage, translationOutcome.success ? 'success' : 'error');

          const alertLines = [
            '✅ Blog post created successfully!',
            '',
            `📝 Slug: ${slug}`,
            `📁 Source file: ${filePath}`,
            `🔗 Source URL: ${sourceUrl}`,
          ];

          if (translationOutcome.success) {
            if (translationOutcome.targetPath) {
              alertLines.push(`📁 Translated file: ${translationOutcome.targetPath}`);
            }
            alertLines.push(`🌐 Translation: ${targetLanguageLabel}`);
            alertLines.push(`🔗 Translated URL: ${targetUrl}`);
          } else {
            alertLines.push(`⚠️ Translation to ${targetLanguageLabel} failed.`);
            if (translationOutcome.error) {
              alertLines.push(`Error: ${translationOutcome.error}`);
            }
          }

          alertLines.push('');
          alertLines.push('🚀 Deployment will be triggered automatically');

          const successMessage = alertLines.join('\n');

          setTimeout(() => {
            alert(successMessage);
            // Reset form
            form.reset();
          }, 1000);
        } else {
          const error = await response.json();
          showMessage(error.message || 'Failed to create blog post', 'error');
        }

      } catch (error) {
        console.error('Create post error:', error);
        showMessage('Network error. Please try again.', 'error');
      } finally {
        setLoading(false);
      }
    });

    // Preview functionality (basic)
    document.getElementById('preview-btn')?.addEventListener('click', () => {
      const content = (document.getElementById('content') as HTMLTextAreaElement).value;
      if (!content) {
        showMessage('Please enter some content to preview', 'error');
        return;
      }

      // Open preview in new window/tab
      const previewWindow = window.open('', '_blank');
      if (previewWindow) {
        previewWindow.document.write(`
          <html>
            <head>
              <title>Preview</title>
              <style>
                body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
                code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
              </style>
            </head>
            <body>
              <h1>Content Preview</h1>
              <pre>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
            </body>
          </html>
        `);
      }
    });
  </script>
</Layout>
