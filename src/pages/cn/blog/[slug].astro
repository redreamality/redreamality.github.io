---
import Layout from '../../../layouts/Layout.astro';
import { getBlogPosts, type Language } from '../../../utils/i18n';
import TableOfContents from '../../../components/TableOfContents.astro';

// This is the Chinese blog post detail page (/cn/blog/slug path)

export async function getStaticPaths() {
  // Get Chinese blog posts
  const zhPosts = await getBlogPosts('zh');
  
  return zhPosts.map(post => ({
    params: { slug: post.slug },
    props: { post, lang: 'zh' as Language },
  }));
}

interface Props {
  post: any;
  lang: Language;
}

const { post, lang } = Astro.props;
const { Content, headings } = await post.render();

// Language-specific content
const content = {
  en: {
    backToBlog: "Back to Blog",
    publishedOn: "Published on",
    updatedOn: "Updated on",
    author: "Author",
    readingTime: "min read",
    tags: "Tags"
  },
  zh: {
    backToBlog: "返回博客列表",
    publishedOn: "发布于",
    updatedOn: "更新于",
    author: "作者",
    readingTime: "分钟阅读",
    tags: "标签"
  }
};

const currentContent = content[lang];
const basePath = lang === 'zh' ? '/cn' : '';

// Calculate reading time (rough estimate)
const wordsPerMinute = lang === 'zh' ? 300 : 200; // Chinese vs English reading speed
const wordCount = post.body?.length || 0;
const readingTime = Math.ceil(wordCount / wordsPerMinute);

// Generate description for meta tags
const description = post.data.description || post.body?.slice(0, 160) + '...' || '';

// Generate canonical URL
const canonicalURL = new URL(`${basePath}/blog/${post.slug}`, Astro.site);

// Generate article image URL
const articleImage = post.data.image
  ? new URL(post.data.image, Astro.site).toString()
  : new URL('/og-image.png', Astro.site).toString();

// Generate structured data for article
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": description,
  "image": articleImage,
  "author": {
    "@type": "Person",
    "name": post.data.author || "Redreamality"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Redreamality's Blog",
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/logo.png', Astro.site).toString()
    }
  },
  "datePublished": post.data.pubDate.toISOString(),
  "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
  "keywords": post.data.tags?.join(", "),
  "url": canonicalURL.toString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.toString()
  }
};
---

<Layout
  title={`${post.data.title} | Redreamality's Blog`}
  description={description}
  image={articleImage}
  canonicalURL={canonicalURL}
  type="article"
  publishDate={post.data.pubDate.toISOString()}
  tags={post.data.tags || []}
  author={post.data.author}
>
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

  <main class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto relative">
      <div class="mb-8">
        <a
          href={`${basePath}/blog`}
          class="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
        >
          <span class="mr-2">←</span>
          {currentContent.backToBlog}
        </a>
      </div>

      <TableOfContents headings={headings} />

      <article class="max-w-3xl bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
        <header>
          <h1 class="text-4xl font-bold mb-6">{post.data.title}</h1>

          <div class="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400 mb-8">
            <time datetime={post.data.pubDate.toISOString()}>
              <span class="mr-2">📅</span>
              {post.data.pubDate.toLocaleDateString(lang === 'zh' ? 'zh-CN' : 'en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
            {post.data.updatedDate && (
              <time datetime={post.data.updatedDate.toISOString()}>
                <span class="mr-2">🔄</span>
                {currentContent.updatedOn}: {post.data.updatedDate.toLocaleDateString(lang === 'zh' ? 'zh-CN' : 'en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            )}
            <div>
              <span class="mr-2">✍️</span>
              {currentContent.author}: {post.data.author}
            </div>
            {post.data.tags && (
              <div class="flex gap-2">
                <span class="mr-2">🏷️</span>
                {post.data.tags.map((tag: string) => (
                  <a
                    href={`${basePath}/tags/${tag}`}
                    class="hover:text-blue-600 dark:hover:text-blue-400"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            )}
          </div>
        </header>

        <article class="prose dark:prose-invert max-w-none">
          <Content />
        </article>
      </article>
    </div>
  </main>
</Layout>

<script>
  // 添加平滑滚动效果和偏移量处理
  document.addEventListener('DOMContentLoaded', () => {
    // 设置顶部偏移量（导航栏高度 + 额外空间）
    const SCROLL_OFFSET = 100;

    // 处理目录点击事件
    document.querySelectorAll('.table-of-contents a').forEach(anchor => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = anchor.getAttribute('href')?.slice(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            // 获取目标元素的位置
            const targetPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = targetPosition + window.pageYOffset - SCROLL_OFFSET;

            // 平滑滚动到目标位置
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });

            // 更新 URL，但不触发滚动
            history.pushState(null, '', `#${targetId}`);
          }
        }
      });
    });

    // 处理页面加载时的锚点
    if (window.location.hash) {
      setTimeout(() => {
        const targetId = window.location.hash.slice(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const targetPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = targetPosition + window.pageYOffset - SCROLL_OFFSET;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      }, 100);
    }

    // 高亮当前可见的目录项
    const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')).filter(h => h.id);
    const tocLinks = document.querySelectorAll('.table-of-contents a');

    function highlightTableOfContents() {
      if (headings.length === 0) return;

      // 找到当前可见的标题
      let current = headings[0];
      for (const heading of headings) {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= SCROLL_OFFSET + 50) {
          current = heading;
        } else {
          break;
        }
      }

      // 移除所有高亮
      tocLinks.forEach(link => {
        link.classList.remove('text-blue-600', 'dark:text-blue-400');
        link.classList.add('hover:text-blue-600', 'dark:hover:text-blue-400');
      });

      // 添加当前标题的高亮
      const currentLink = document.querySelector(`.table-of-contents a[href="#${current.id}"]`);
      if (currentLink) {
        currentLink.classList.add('text-blue-600', 'dark:text-blue-400');
        currentLink.classList.remove('hover:text-blue-600', 'dark:hover:text-blue-400');
      }
    }

    // 监听滚动事件
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          highlightTableOfContents();
          ticking = false;
        });
        ticking = true;
      }
    });

    // 初始高亮
    highlightTableOfContents();
  });
</script>
